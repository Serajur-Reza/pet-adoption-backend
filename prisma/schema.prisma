// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String
  username     String
  email        String   @unique
  password     String
  profilePhoto String
  isActivated  Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  role         UserRole
  admin        Admin?
  adoptor      Adoptor?

  @@map("users")
}

model Adoptor {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String?
  isActivated   Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  adoption Adoption[]
  user     User       @relation(fields: [email], references: [email])

  @@map("adoptors")
}

model Admin {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String?
  isActivated   Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [email], references: [email])

  @@map("admins")
}

model Pet {
  id            String     @id @default(uuid())
  name          String
  photos        String[]
  description   String
  gender        Gender
  breed         String
  age           Int
  health_status String
  location      String
  isDeleted     Boolean
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  adoption      Adoption[]

  @@map("pets")
}

model Adoption {
  id        String         @id @default(uuid())
  userId    String
  petId     String
  status    AdoptionStatus @default(PENDING)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  adoptor Adoptor @relation(fields: [userId], references: [id])
  pet     Pet     @relation(fields: [petId], references: [id])

  @@map("adoptions")
}

enum AdoptionStatus {
  PENDING
  APPROVED
  REJECTED
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  ADOPTOR
}

enum Gender {
  MALE
  FEMALE
}
